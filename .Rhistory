# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp("my_app")
runApp("my_app")
runApp("my_app")
setwd("~/R/assignment_3/my_app")
runApp("my_app")
runApp("my_app")
setwd("~/R/assignment_3")
runApp("my_app")
runApp("my_app")
runApp("my_app")
setwd("~/R/assignment_3")
runApp("my_app")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp("my_app")
runApp("my_app")
runApp("my_app")
setwd("~/R/assignment_3/my_app")
runApp("my_app")
setwd("~/R/assignment_3")
runApp("my_app")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp("my_app")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
y
runApp("my_app")
shinyApp(ui = ui, server = server)
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
key = athlete
key = "athlete"
m = googleSuggest(key)
print(m)
runApp("my_app")
print(m)
View(m)
print(m[1])
print(m[1])
View(m)
print(m[1,1])
print(m[1,2])
print(m[2,1])
print(m)
View(m)
print(m[1])
print(m[2,2])
print(m[1,1])
print(m[4])
print(m[1])
print(m[,1])
print(m[,2])
View(m)
print(m$keyword_suggestions)
runApp("my_app")
print(m$keyword_suggestions[1])
print(m$keyword_suggestions[1])
print(m$keyword_suggestions[2])
m = googleSuggest(key)
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
word1 = "xiosdiofojsdoi"
word2 = "Sadnajfe"
paste(word1,word2, sep = "\n")
paste(word1,word2, sep = "/n")
paste(word1,word2, sep = "/n ")
cat(word1,word2, sep = "/n ")
cat(word1,word2, sep = "\n ")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
key = "athlete"
m = googleSuggest(key)
print(m$keyword_suggestions[2])
print(m$keyword_suggestions)
View(ui)
View(m)
k = list(m)
View(k)
print(k)
k[1]
k[[1]]
print(m$keyword_suggestions)
k = (m$keyword_suggestions)
list(k)
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp('my_app')
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
print(m[[i]])
library(DT)
runApp("my_app")
x = "zoho"
p=c()
m=c()
for (i in 97:122){
y = paste(x,intToUtf8(i),sep = " ")
p[i]=(googleSuggest(y))
}
library(seoR)
library(gtools)
library(rlist)
library(usethis)
x = "zoho"
p=c()
m=c()
for (i in 97:122){
y = paste(x,intToUtf8(i),sep = " ")
p[i]=(googleSuggest(y))
}
for (i in 97:122){
m[i-96]=p[i]
}
for(i in 1:26){
print(m[[i]])
write.table( data.frame(m[[i]]), 'test.csv'  , append= T, sep=',' )
}
m
m[1]
for (i in 97:122){
m[i-96]=p[i]
}
m[[1]]
m[[2]]
m[1]
m[2]
m[2][1]
m[[1]][1]
m[[1][1]
m[1][1]
for (i in 1:26){
y = paste(x,intToUtf8(96+i),sep = " ")
p[i]=(googleSuggest(y))
}
y
p
p
for (i in 1:26){
y = paste(x,intToUtf8(96+i),sep = " ")
p[i]=(googleSuggest(y))
}
x = "zoho"
p=c()
m=c()
for (i in 1:26){
y = paste(x,intToUtf8(96+i),sep = " ")
p[i]=(googleSuggest(y))
}
p
p[[1]]
p[[2]]
for(i in 1:26){
print(p[[i]])
write.table( data.frame(m[[i]]), 'test.csv'  , append= T, sep=',' )
}
for(i in 1:26){
print(p[[i]])
write.table( data.frame(p[[i]]), 'test.csv'  , append= T, sep=',' )
}
data = read.csv("test.csv")
data = read.csv("test.csv")
View(p)
p[[1]]
data = read.csv("test.csv")
data = read.table("test.csv")
data = read.table("test.csv",sep=",")
?read.csv
?read.csv
data = read.csv("test.csv",sep=",",row.names = F)
data = read.csv("test.csv",sep=",",row.names = F)
data = read.csv("test.csv",sep=",",row.names = F)
data = read.csv("test.csv",row.names = F)
p[[1]]
p[[1]][1]
p[1]
p[[1]]
library(devtools)
install_github("mhairi/keyword_tool_api/")
install_github("mhairi/keyword_tool_api")
library(keywordtool)
get_search_volume(p[[1]])
library(shiny)
runApp("my_app")
output$downloadData <- downloadHandler(
filename = function() {
paste("data", ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
p[[1]]
p[[2]]
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
library(shiny)
library(seoR)
library(rlist)
runApp("my_app")
read.csv("data.csv")
dataset = read.csv("data.csv")
View(dataset)
install.packages("mailR")
library(mailR)
send.mail(from="pranav.k@zohocorp.com",
to="pranav.k@zohocorp.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.zoho.com",
port = 465,
user.name = "pranav.k@zohocorp.com",
passwd = "teepee30",
ssl = T),
authenticate=T,
attach.files="C:\Users\pranav-pt3221\Documents\R\assignment_3\data.csv")
send.mail(from="pranav.k@zohocorp.com",
to="pranav.k@zohocorp.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.zoho.com",
port = 465,
user.name = "pranav.k@zohocorp.com",
passwd = "teepee30",
ssl = T),
authenticate=T,
attach.files="C:\\Users\\pranav-pt3221\\Documents\\R\\assignment_3\\data.csv")
send.mail(from="pranav.krishnan.kp@gmail.com",
to="pranav.k@zohocorp.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.gmail.com",
port = 465,
user.name = "pranav.krishnan.kp@gmail.com",
passwd = "shivisafaggot",
ssl = T),
authenticate=T,
attach.files="C:\\Users\\pranav-pt3221\\Documents\\R\\assignment_3\\data.csv")
send.mail(from="pranav.k@zohocorp.com",
to="pranav.k@zohocorp.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.zoho.com",
port = 465,
user.name = "pranav.k@zohocorp.com",
passwd = "teepee30",
ssl = T),
authenticate=T,
attach.files="C:\\Users\\pranav-pt3221\\Documents\\R\\assignment_3\\data.csv")
send.mail(from="pranav.krishnan.kp@gmail.com",
to="pranav.k@zohocorp.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.gmail.com",
port = 465,
user.name = "pranav.krishnan.kp@gmail.com",
passwd = "shivisafaggot",
ssl = T),
authenticate=T,
attach.files="C:\\Users\\pranav-pt3221\\Documents\\R\\assignment_3\\data.csv")
runApp("my_app")
runApp("my_app")
runApp('my_app')
runApp("my_app")
runApp("my_app")
